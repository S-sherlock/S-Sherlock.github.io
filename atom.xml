<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-01T03:34:51.318Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王政</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>包</title>
    <link href="http://yoursite.com/2018/12/01/%E5%8C%85/"/>
    <id>http://yoursite.com/2018/12/01/包/</id>
    <published>2018-12-01T02:26:17.000Z</published>
    <updated>2018-12-01T03:34:51.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="os包"><a href="#os包" class="headerlink" title="os包"></a>os包</h2><p>os包：operate system，主要负责新建文件，改文件名，路径，操作电脑系统相关的功能，是一个内置包。</p><p>首先在开头引入包 <code>import os</code></p><ol><li><p><code>os.path.exists()</code> 判断是否存在文件</p><p><code>print(os.path.exists(&#39;app.py&#39;))</code>  如果存在app.py则返回True</p></li><li><p><code>os.rename()</code>       重命名</p><p><code>os.rename(&#39;aaa.txt&#39;, &#39;bbb.txt&#39;)</code>前者是老名字，后者是改过后的新名字。</p></li><li><p><code>os.remove()</code>      删除文件，括号内为文件名</p></li><li><code>os.mkdir()</code>         新建文件夹 ，括号内是文件夹名字</li><li><code>os.listdir()</code>     列出当前文件夹下的文件</li><li><code>os.chdir()</code>         切换当前文件夹</li><li><p><code>os.getcwd()</code>       获取当前py所在的文件夹。</p></li><li><p><code>os.path.join(&#39;d:/python课件/os包/&#39;,&#39;me.txt&#39;)</code> 拼接文件路径</p></li></ol><p>这部分知识不难，但是内容很繁杂，没必要刻意去记。用的时候翻出来会用就行。</p><hr><h2 id="time包和datetime包"><a href="#time包和datetime包" class="headerlink" title="time包和datetime包"></a>time包和datetime包</h2><p>time包和datetime包都是时间处理的包</p><h3 id="datetime包"><a href="#datetime包" class="headerlink" title="datetime包"></a>datetime包</h3><p>首先在开头引入包</p><p><code>from datetime import datetime,timedelta</code></p><ol><li><p><code>datetime.now()</code>返回当前时间，字符串，方便进行日期加减等处理。这里的datetime是import后面的datetime。如果开头引入的时候写成<code>import datetime</code>，那这个就应该写成<code>datetime.datetime.now()</code>然后再打印出来。</p></li><li><p>创建datetime对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dt = datetime(<span class="number">2018</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">55</span>,<span class="number">00</span>)</span><br><span class="line">print(dt.year)</span><br><span class="line">print(dt.hour)</span><br></pre></td></tr></table></figure><p>执行完我们发现第一个打印出来是2018，第二个打印出来是10</p></li><li><p>日期加减，用于判断活动截止，定时，或者任务之类的。</p><p><code>print(datetime.now() + timedelta(days=1, hours=10))</code>打印出来发现时间是一天零十个小时之后的时间。</p></li><li><p>格式化时间输出  strftime  </p><p><code>print(datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;))</code></p><p>打印出来时间是按照小括号里的格式进行打印2018-12-01 11:03:35</p></li></ol><hr><h3 id="time包"><a href="#time包" class="headerlink" title="time包"></a>time包</h3><ol><li><p>生成时间戳 <code>time()</code>，整数形式的时间戳 timestamp：当前时间减去1970-1-4 0:0:0的秒数，把时间量化成数字，比较时间先后顺序。计算转换有优势，缺点是可读性差。默认长度只能表示到2038年。</p><p><code>print(time.time())</code> 可以试着打印出来看一下。</p></li><li><p>生成本地时间<code>time.localtime()</code></p><p>我们打印一下<code>print(time.localtime())</code> 发现打印出的结果是<strong>time.struct_time(tm_year=2018, tm_mon=12, tm_mday=1, tm_hour=11, tm_min=11, tm_sec=57, tm_wday=5, tm_yday=335, tm_isdst=0)</strong>，里面的内容什么意思我觉得能猜个大概，比如里面的yday=35 ，我猜测意思可能是今天是今年的第335天，离这一年过去还有60天。</p></li><li><p>格式化时间，time和datetime略有不同</p><p><code>print(time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime()))</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;os包&quot;&gt;&lt;a href=&quot;#os包&quot; class=&quot;headerlink&quot; title=&quot;os包&quot;&gt;&lt;/a&gt;os包&lt;/h2&gt;&lt;p&gt;os包：operate system，主要负责新建文件，改文件名，路径，操作电脑系统相关的功能，是一个内置包。&lt;/p&gt;
&lt;p&gt;首先在
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="包" scheme="http://yoursite.com/tags/%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>类的继承</title>
    <link href="http://yoursite.com/2018/11/30/%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/11/30/类的继承/</id>
    <published>2018-11-30T12:54:53.000Z</published>
    <updated>2018-11-30T13:16:00.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引题</strong>：生活例子。手机类，OPPO手机类、华为手机类看做是手机类里的对象；但oppo手机也可以称作一个类，这个类下又包含find系列、R系列类，R系列类又包含某某具体型号对象。类有包含、继承的关系。</p><p>首先我们写两个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, salary, subject, address)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.salary = salary</span><br><span class="line">        self.subject = subject</span><br><span class="line">        self.address = address</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_work</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, hobby, parent_info)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.hobby = hobby</span><br><span class="line">        self.parent_info = parent_info</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>可以看得出来上面的代码类与相似的类有重复的属性和方法，书写麻烦。</p><p>所以python引入了类继承机制，继承是类的三大特性之一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span>  <span class="comment"># 动物类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'动物在跑'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 狗狗类 是动物类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'狗会游泳'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 猫咪类 也是动物类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl_tree</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'猫会爬树'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'猫灵活地跑'</span>)</span><br><span class="line"></span><br><span class="line">dog1 = Dog(<span class="string">'阿黄'</span>)</span><br><span class="line">dog1.run()</span><br><span class="line">dog1.swim()</span><br><span class="line">cat1 = Cat(<span class="string">'小花'</span>)</span><br><span class="line">cat1.run()</span><br><span class="line">cat1.crawl_tree()</span><br></pre></td></tr></table></figure><p>代码的最后<code>dog1.run()</code>执行以后发现打印出来的是’动物在跑’，而run()函数是动物类中的函数。这说明子类继承父类所有的属性、方法: Dog类实例化用的是父类Animal类中的<strong>init</strong>() 和run()。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;引题&lt;/strong&gt;：生活例子。手机类，OPPO手机类、华为手机类看做是手机类里的对象；但oppo手机也可以称作一个类，这个类下又包含find系列、R系列类，R系列类又包含某某具体型号对象。类有包含、继承的关系。&lt;/p&gt;
&lt;p&gt;首先我们写两个类&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>类和对象</title>
    <link href="http://yoursite.com/2018/11/30/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/11/30/类和对象/</id>
    <published>2018-11-30T11:12:51.000Z</published>
    <updated>2018-11-30T12:53:47.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识类和对象"><a href="#初识类和对象" class="headerlink" title="初识类和对象"></a>初识类和对象</h2><p><strong>引题</strong>：回忆之前没有函数时的写法，有函数封装之后的写法。</p><ol><li>单条语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置三个圆的半径 求面积</span></span><br><span class="line">r1 = <span class="number">3</span></span><br><span class="line">r2 = <span class="number">4</span></span><br><span class="line">r3 = <span class="number">5.5</span></span><br><span class="line">print(<span class="string">'圆的面积：'</span>, r1*r1*<span class="number">3.14</span>)</span><br><span class="line">print(<span class="string">'圆的面积：'</span>, r2*r2*<span class="number">3.14</span>)</span><br><span class="line">print(<span class="string">'圆的面积：'</span>, r3*r3*<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>函数   封装功能，抽象出解决问题的公共过程。调用时传入参数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_area</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> r*r*<span class="number">3.14</span></span><br><span class="line">calulate_area(r1)</span><br><span class="line">calulate_area(r2)</span><br><span class="line">calulate_area(r3)</span><br></pre></td></tr></table></figure><ol start="3"><li>类，面向对象</li></ol><p>这里建一个学生的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># __init__() 是初始化函数，定义初始化的值，不需要手动调用。</span></span><br><span class="line">    <span class="comment"># 初始化函数会先调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score ,sex)</span>:</span></span><br><span class="line">        <span class="comment"># 等号右侧的name是__init__()函数执行时传过来的参数</span></span><br><span class="line">        <span class="comment"># 变量的名字前面加上self.可以理解为能够在这个类里全局调用</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        self.sex = sex</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在类中定义一个函数</span></span><br><span class="line">    <span class="comment"># 类中函数的第一个参数必须是固定的self</span></span><br><span class="line">    <span class="comment"># self由解释器自动传参，self后面是自定义参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;的成绩是&#123;&#125;'</span>.format(self.name, self.score))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_sex</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;的性别是&#123;&#125;'</span>.format(self.name, self.sex))</span><br></pre></td></tr></table></figure><p>函数写好了，具体的意思都写在代码注释里了。写好了但是还没完 ，我们必须要调用对象方法.接着上面的代码写。注意这里！调用和实例化的代码缩进要和上面类一样。也就是顶格写。！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化，通俗一点的说是把括号内的参数传到Student类里面。</span></span><br><span class="line"><span class="comment"># 并且他们被__init__()函数所调用。</span></span><br><span class="line">stu1 = Student(<span class="string">'小明'</span>, <span class="number">90</span>, <span class="string">'男'</span>)</span><br><span class="line">stu2 = Student(<span class="string">'小红'</span>, <span class="number">80</span>, <span class="string">'女'</span>)</span><br><span class="line"><span class="comment"># 调用对象方法</span></span><br><span class="line">print(stu1.name) <span class="comment"># 这里可以打印一下看看会输出什么。</span></span><br><span class="line">stu1.print_score()</span><br><span class="line">stu2.print_sex()</span><br></pre></td></tr></table></figure><p>类class和实例instance（重点）：“人类”和“小明”。类是许多个体的集合，一个抽象名词、统称。’小明’或者 “你自己” 或“特普朗” 这些都是人类这个集合中一个个具体的人、个体。那么我们把类中具体的个体叫“对象”、“实例”。  再举几个例子：水果类包含苹果、梨。 电子产品类，电脑，手机。 手机类，苹果，华为。<br>属性attribute，成员方法：一类事物的特性叫做属性，例如Student类中的name、score、sex。类中个体、成员具备的功能、方法叫做成员方法。</p><p>语法：类关键字class  类名()： 类方法。<br>驼峰命名：（约定俗成）每一个单词挨着写并且首字母大写。例如：ElectronicProduct。java中常见。</p><hr><hr><h2 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h2><p>上面的例子学生类里的属性可以读也可以被修改，这样会导致安全问题，比如小明修改成绩。在上面例子下面加两行代码</p><p><code>stu1.score = 100</code></p><p><code>print(stu1.score)</code></p><p>这时候我们发现打印出来小明的成绩已经变成100分。</p><p>下面是类的私有属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score, sex, password)</span>:</span></span><br><span class="line">        <span class="comment"># 双下划线开头的属性不能直接访问，这样确保了安全性。</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">        self.__sex = sex</span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line">stu1 = Student2(<span class="string">'小明'</span>, <span class="number">90</span>, <span class="string">'男'</span>, <span class="string">'12345'</span>)</span><br><span class="line">print(stu1.__password)</span><br></pre></td></tr></table></figure><p>如果执行上面的代码 那打印出来就会报错AttributeError: ‘Student2’ object has no attribute ‘__password’</p><p>而且在下面输入<code>stu1.__score = 100</code>这种强行赋值的方法也会报错</p><p>但是有的时候我们又想获取对象的信息怎么办呢？</p><p> gtter和setter函数了解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score, sex, password)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">        self.__sex = sex</span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询分数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改分数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'分数输入错误'</span>)</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">stu1 = Student3(<span class="string">'小明'</span>, <span class="number">90</span>, <span class="string">'男'</span>, <span class="string">'12345'</span>)</span><br><span class="line">print(stu1.get_score())</span><br><span class="line">stu1.set_score(<span class="number">100</span>)</span><br><span class="line">print(stu1.get_score())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初识类和对象&quot;&gt;&lt;a href=&quot;#初识类和对象&quot; class=&quot;headerlink&quot; title=&quot;初识类和对象&quot;&gt;&lt;/a&gt;初识类和对象&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;引题&lt;/strong&gt;：回忆之前没有函数时的写法，有函数封装之后的写法。&lt;/p&gt;
&lt;ol&gt;

      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础，python，类" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%EF%BC%8Cpython%EF%BC%8C%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://yoursite.com/2018/11/29/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/11/29/git学习/</id>
    <published>2018-11-29T04:52:24.000Z</published>
    <updated>2018-11-30T10:04:17.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git优势"><a href="#git优势" class="headerlink" title="git优势"></a>git优势</h2><p>git能大幅提高工作效率</p><ol><li>记录每次代码变更的内容和时间点，如果代码丢失或崩溃，可以快速回复到之前任意时间点版本。</li><li>多人协作。如果代码冲突可以直观看到并解决。合并多人代码时较方便。</li></ol><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><ol><li>理解 本地、暂存区、提交、远程仓库。</li><li>先学基本命令，随着项目慢慢熟练。先不要看高级命令，因为几乎用不到。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>廖雪峰git教程点<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">这里</a></li><li>玩游戏学git点<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">这里</a></li></ol><h1 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在项目文件夹根目录下右键git bash</p><p>git init  。初始化本地仓库git，会看到项目文件夹下生成.git隐藏文件夹，这个文件夹会记录以后每次的更改和提交</p><p><img src="/2018/11/29/git学习/2.png" alt=""></p><p><img src="/2018/11/29/git学习/1.png" alt=""></p><p>git config –global user.name  第一次使用git配置初始化用户名</p><p>git config –global user.email 配置邮箱</p><p><img src="/2018/11/29/git学习/3.png" alt=""></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>git add 文件名 。跟踪一个文件。例如git add 1.py</p><p>git add .   。跟踪当前文件夹下所有文件</p><p>git merge 副分支。合并分支内容到当前分支</p><p>git log   查看记录</p><p>git reset –hard 提交记录的id  还原到此id时候的状态。\</p><p>git clone ssh链接 。 远程仓库克隆到自己本地的电脑上。这里以github为例。</p><p>点击右上角绿色方块  点击your repositories</p><p><img src="/2018/11/29/git学习/4.png" alt=""></p><p>进入到你要克隆的仓库</p><p><img src="/2018/11/29/git学习/5.png" alt=""></p><p>点击右侧clone or download，出来默认是http格式的，下面的链接也是http开头的。但是我们需要的是ssh格式的，所以我们点击use ssh。</p><p><img src="/2018/11/29/git学习/7.png" alt=""></p><p>点击之后链接变成了ssh格式。然后选中ctrl+c复制  或者点击箭头指着的按钮都行。</p><p><img src="/2018/11/29/git学习/8.png" alt=""></p><p>然后在你的项目文件夹下邮件点击git bash 打开命令窗口 。在这个命令窗口中把链接粘贴过去就行。</p><p>tips小技巧，shift+insert 粘贴效果比较不错 。</p><p><img src="/2018/11/29/git学习/9.png" alt=""></p><p>然后会发现在项目文件夹下多了一个文件夹 就是你克隆的项目名字。到这里就成功了 。</p><p><img src="/2018/11/29/git学习/10.png" alt=""></p><p>git push origin  在你本地项目的文件夹下邮件git bash把本地项目提交推送到远程服务器仓库。这样当更换电脑或是本地仓库被破坏时，可以快速从远程仓库克隆回复。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ol><li>(<em>newfeature)git add .   git commit -m “”</em></li><li><em>(</em>newfeature)git checkout master</li><li>(*marster)git merge newferture  这样就会把新分支合并到主分支下。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git优势&quot;&gt;&lt;a href=&quot;#git优势&quot; class=&quot;headerlink&quot; title=&quot;git优势&quot;&gt;&lt;/a&gt;git优势&lt;/h2&gt;&lt;p&gt;git能大幅提高工作效率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录每次代码变更的内容和时间点，如果代码丢失或崩溃，可以快速回复
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>hello my blog</title>
    <link href="http://yoursite.com/2018/11/27/hello-python/"/>
    <id>http://yoursite.com/2018/11/27/hello-python/</id>
    <published>2018-11-27T12:55:48.000Z</published>
    <updated>2018-11-28T14:29:27.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-11-28-22-26"><a href="#2018-11-28-22-26" class="headerlink" title="2018-11-28 22:26"></a>2018-11-28 22:26</h2><p>博客终于搭建好，耗费2个晚上的时间。<br>眼花缭乱，头昏脑涨。<br>功夫不负有心人。<br>终于弄好，虽然不难，但是巨麻烦。<br>记录下这个时间点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-11-28-22-26&quot;&gt;&lt;a href=&quot;#2018-11-28-22-26&quot; class=&quot;headerlink&quot; title=&quot;2018-11-28 22:26&quot;&gt;&lt;/a&gt;2018-11-28 22:26&lt;/h2&gt;&lt;p&gt;博客终于搭建好，耗费2个晚上
      
    
    </summary>
    
      <category term="test" scheme="http://yoursite.com/categories/test/"/>
    
    
      <category term="test blog" scheme="http://yoursite.com/tags/test-blog/"/>
    
      <category term="hexo is great" scheme="http://yoursite.com/tags/hexo-is-great/"/>
    
  </entry>
  
</feed>
