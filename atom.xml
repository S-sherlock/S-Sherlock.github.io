<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-18T13:33:08.500Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王政</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django学习4-视图</title>
    <link href="http://yoursite.com/2018/12/18/django%E5%AD%A6%E4%B9%A04/"/>
    <id>http://yoursite.com/2018/12/18/django学习4/</id>
    <published>2018-12-18T12:34:36.000Z</published>
    <updated>2018-12-18T13:33:08.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>有了前面的学习基础之后，我迫不及待的想要做出漂亮的界面了。把前端页面从后端返回到路由中，这就是视图函数所要做的事。</p><p>在我们的投票应用中，我们需要下列几个视图：</p><ul><li>问题索引页——展示最近的几个投票问题</li><li>问题详情页——展示某个投票的问题和不带结果的选项列表。</li><li>问题结果页——展示某个投票的结果。</li><li>投票处理器——用于响应用户为某个问题的待定选项投票的操作</li></ul><p>在 Django 中，网页和其他内容都是从视图派生而来。每一个视图表现为一个简单的 Python 函数（或者说方法，如果是在基于类的视图里的话）。Django 将会根据用户请求的 URL 来选择使用哪个视图（更准确的说，是根据 URL 中域名之后的部分）。</p><h2 id="编写视图函数"><a href="#编写视图函数" class="headerlink" title="编写视图函数"></a>编写视图函数</h2><p>现在向polls/views.py里添加更多视图。这些视图有一些不同，因为他们接受参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示投票的详细内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 投票结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 投票页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>我习惯先建好框架，代码更佳清晰，也可以按照文档中想先看一下效果的话就给个返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s"</span> % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br></pre></td></tr></table></figure><p>把这些新视图添加进polls.urls模块里，只需要添加几个url()函数调用就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># http://ip:port/polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># 首页问题列表 /polls/index/</span></span><br><span class="line">    path(<span class="string">'index/'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># 问题详情页 ex:/polls/1/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment"># 投票结果页</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># 去投票，选项计数加一/polls/5/vote</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一会儿在浏览器中输入相应的路由即可查看这些视图函数的返回</p><h3 id="写一个真正有用的视图"><a href="#写一个真正有用的视图" class="headerlink" title="写一个真正有用的视图"></a>写一个真正有用的视图</h3><p>把我们数据库中的表中数据给迭代出来，返回到我们写的页面中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)</span><br><span class="line">    output = <span class="string">', '</span>.join([question.question_text <span class="keyword">for</span> question <span class="keyword">in</span> question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><p>这里有个问题：页面的设计写死在视图函数的代码里的。如果你想改变页面的样子，你需要编辑 Python 代码。所以让我们使用 Django 的模板系统，只要创建一个视图，就可以将页面的设计从代码中分离出来。</p><p>首先，在你的 polls 目录里创建一个 templates 目录。Django 将会在这个目录里查找模板文件。</p><p>你项目的 TEMPLATES 配置项描述了 Django 如何载入和渲染模板。默认的设置文件设置了 DjangoTemplates 后端，并将 APP_DIRS 设置成了 True。这一选项将会让 DjangoTemplates 在每个 INSTALLED_APPS 文件夹中寻找 “templates” 子目录。这就是为什么尽管我们没有像在第二部分中那样修改 DIRS 设置，Django 也能正确找到 polls 的模板位置的原因。</p><p>在你刚刚创建的 templates 目录里，再创建一个目录 polls，然后在其中新建一个文件 index.html 。换句话说，你的模板文件的路径应该是 polls/templates/polls/index.html 。因为 Django 会寻找到对应的 app_directories ，所以你只需要使用 polls/index.html 就可以引用到这一模板了。</p><p>将下面的代码输入到刚刚创建的模板文件中也就是index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>问题列表为空<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in question_list %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>问题：&#123;&#123; question.question_text &#125;&#125;   发布时间：&#123;&#123; question.pub_date &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>然后，让我们更新一下 polls/views.py 里的 index 视图来使用模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)</span><br><span class="line">    template = loader.get_template(<span class="string">'polls/index.html'</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'question_list'</span>: question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure><p>上述代码的作用是，载入 <code>polls/index.html</code> 模板文件，并且向它传递一个上下文(context)。这个上下文是一个字典，它将模板内的变量映射为 Python 对象,也就是把后端数据传到前端。</p><p>用你的浏览器访问 “/polls/“ ，你将会看见一个无序列表。列出了我们在 教程第 2 部分 中添加的 “What’s up” 投票问题，链接指向这个投票的详情页。</p><h3 id="一个快捷函数：-render"><a href="#一个快捷函数：-render" class="headerlink" title="一个快捷函数： render()"></a>一个快捷函数： render()</h3><p>「载入模板，填充上下文，再返回由它生成的 HttpResponse 对象」是一个非常常用的操作流程。于是 Django 提供了一个快捷函数，我们用它来重写 index() 视图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure><p>注意到，我们不再需要导入 loader 和 HttpResponse 。不过如果你还有其他函数（比如说 detail, results, 和 vote ）需要用到它的话，就需要保持 HttpResponse 的导入。</p><h3 id="抛出404错误"><a href="#抛出404错误" class="headerlink" title="抛出404错误"></a>抛出404错误</h3><p>现在，我们来处理投票详情视图——它会显示指定投票的问题标题。下面是这个视图的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(id=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>这里有个新原则。如果指定问题 ID 所对应的问题不存在，这个视图就会抛出一个 Http404 异常。</p><p>我们稍后再讨论你需要在 polls/templates/polls/detail.html 里输入什么，但是如果你想试试上面这段代码是否正常工作的话，你可以暂时把下面这段输进去：</p><figure class="highlight plain"><figcaption><span>question &#125;&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样你就能测试了。</span><br><span class="line"></span><br><span class="line">### 一个快捷函数： get_object_or_404()</span><br><span class="line"></span><br><span class="line">尝试用 get() 函数获取一个对象，如果不存在就抛出 Http404 错误也是一个普遍的流程。Django 也提供了一个快捷函数，下面是修改后的详情 detail() 视图代码：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">from django.shortcuts import get_object_or_404, render</span><br><span class="line"></span><br><span class="line">from .models import Question</span><br><span class="line"># ...</span><br><span class="line">def detail(request, question_id):</span><br><span class="line">    question = get_object_or_404(Question, id=question_id)</span><br><span class="line">    return render(request, &apos;polls/detail.html&apos;, &#123;&apos;question&apos;: question&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用模板系统"><a href="#使用模板系统" class="headerlink" title="使用模板系统"></a>使用模板系统</h3><p>回过头去看看我们的 detail() 视图。它向模板传递了上下文变量 question 。下面是 polls/templates/polls/detail.html 模板里正式的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板系统统一使用点符号来访问变量的属性。在示例 <figure class="highlight plain"><figcaption><span>question.question_text &#125;&#125;``` 中，首先 Django 尝试对 question 对象使用字典查找（也就是使用 obj.get(str) 操作），如果失败了就尝试属性查找（也就是 obj.str 操作），结果是成功了。如果这一操作也失败的话，将会尝试列表查找（也就是 obj[int] 操作）。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在``` &#123;% for %&#125;``` 循环中发生的函数调用：question.choice_set.all 被解释为 Python 代码 question.choice_set.all() ，**也就是前面提到的反向查询**。将会返回一个可迭代的 Choice 对象，这一对象可以在 ```&#123;% for %&#125; ```标签内部使用。</span><br><span class="line"></span><br><span class="line">### 去除模板中的硬编码URL</span><br><span class="line"></span><br><span class="line">我们在 polls/index.html 里编写投票链接时，链接是硬编码的，是直接写死的</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;a href=&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;&gt;</span><br><span class="line">&#123;&#123; question.question_text &#125;&#125;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>问题在于，硬编码和强耦合的链接，对于一个包含很多应用的项目来说，修改起来是十分困难的。然而，因为你在 polls.urls 的 url() 函数中通过 name 参数为 URL 定义了名字，你可以使用<figure class="highlight plain"><figcaption><span>url %&#125;``` 标签代替它：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;detail&apos; question.id %&#125;&quot;&gt;</span><br><span class="line">&#123;&#123; question.question_text &#125;&#125;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>这个标签的工作方式是在 polls.urls 模块的 URL 定义中寻具有指定名字的条目。你可以回忆一下，具有名字 ‘detail’ 的 URL 是在如下语句中定义的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># the 'name' value as called by the &#123;% url %&#125; template tag</span></span><br><span class="line">path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果你想改变投票详情视图的 URL，比如想改成 polls/specifics/12/ ，你不用在模板里修改任何东西（包括其它模板），只要在 polls/urls.py 里稍微修改一下就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># added the word 'specifics'</span></span><br><span class="line">path(<span class="string">'specifics/&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="为-URL-名称添加命名空间"><a href="#为-URL-名称添加命名空间" class="headerlink" title="为 URL 名称添加命名空间"></a>为 URL 名称添加命名空间</h3><p>教程项目只有一个应用，polls 。在一个真实的 Django 项目中，可能会有五个，十个，二十个，甚至更多应用。Django 如何分辨重名的 URL 呢？举个例子，polls 应用有 detail 视图，可能另一个博客应用也有同名的视图。Django 如何知道<figure class="highlight plain"><figcaption><span>url %&#125; ```标签到底对应哪一个应用的 URL 呢？</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">答案是：在根 URLconf 中添加命名空间。在 polls/urls.py 文件中稍作修改，加上 app_name 设置命名空间：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">app_name = &apos;polls&apos;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;&apos;, views.index, name=&apos;index&apos;),</span><br><span class="line">    path(&apos;&lt;int:question_id&gt;/&apos;, views.detail, name=&apos;detail&apos;),</span><br><span class="line">    path(&apos;&lt;int:question_id&gt;/results/&apos;, views.results, name=&apos;results&apos;),</span><br><span class="line">    path(&apos;&lt;int:question_id&gt;/vote/&apos;, views.vote, name=&apos;vote&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>现在，编辑 polls/index.html 文件，从：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'detail' question.id %&#125;"</span>&gt;</span></span><br><span class="line">        &#123;&#123; question.question_text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为指向具有命名空间的详细视图：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span></span><br><span class="line">        &#123;&#123; question.question_text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>小结</strong></p><p>视图函数的作用就是从后端返回一些信息到前端页面，然后编写相应的url路由引入这些视图。</p><p>在polls/views.py中编写视图，在polls/urls.py中编写路由</p><ol><li>为了方便HttpResponse对象使用模板，Django提供了一个快捷函数render()render函数有三个参数，第一个参数为request，第二个参数为要引用的模板，第三个参数为传入的上下文对象context字典。注意，在Django中写视图函数，默认都要传入一个reqeust参数，否则不能正常工作。</li><li>在处理请求时，经常会抛出404错误，在这个应用中，如果问题ID所对应的问题不存在，就需要抛出一个http404异常。起先，我们在detail视图里使用try except来抛出http404异常，但是这样写太麻烦了。Django提供了一个快捷函数get_object_or_404()。get_object_or_404()函数将Django模型作为其第一个参数和任意数量的关键字参数，并将这些参数传递给模型管理器的get()函数。如果对象不存在，它将引发Http404。</li><li>在一个完整的Django项目中，可能会有很多应用。每个应用都包含很多URL，难免会出现重复的URL，为了区分它们，可以每个应用的urls中加上app_name设置命名空间，然后在别处引入URL时（比如在html页面中指向url，）在路由url前加上命名空间即可。</li></ol><hr><p><strong>参考</strong>：</p><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">django官方文档</a></p><p><a href="https://forali.club/" target="_blank" rel="noopener">余某人的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;有了前面的学习基础之后，我迫不及待的想要做出漂亮的界面了。把前端页面从后端返回到路由中，这就是视图函数所要做的事。&lt;/p&gt;
&lt;p&gt;在我们的投
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="web框架" scheme="http://yoursite.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>django学习3</title>
    <link href="http://yoursite.com/2018/12/18/django%E5%AD%A6%E4%B9%A03/"/>
    <id>http://yoursite.com/2018/12/18/django学习3/</id>
    <published>2018-12-18T11:15:06.000Z</published>
    <updated>2018-12-18T12:12:32.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库API"><a href="#数据库API" class="headerlink" title="数据库API"></a>数据库API</h2><p>现在让我们进入交互式 Python 命令行，尝试一下 Django 为你创建的各种 API。通过以下命令打开 Python 命令行：</p><p><code>py manage.py shell</code></p><p>我们使用这个命令而不是简单的使用 “Python” 是因为 manage.py 会设置 DJANGO_SETTINGS_MODULE 环境变量，这个变量会让 Django 根据 mysite/settings.py 文件来设置 Python 包的导入路径。</p><p>当你成功进入命令行后，来试试 database API 吧:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; from polls.models import Choice, Question  # 引入刚刚建的类</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> No questions are in the system yet.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Question.objects.all()</span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Create a new Question.</span><br><span class="line"><span class="meta">#</span> Support for time zones is enabled in the default settings file, so</span><br><span class="line"><span class="meta">#</span> Django expects a datetime with tzinfo for pub_date. Use timezone.now()</span><br><span class="line"><span class="meta">#</span> instead of datetime.datetime.now() and it will do the right thing.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; from django.utils import timezone</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q = Question(question_text="下周五考试吗？", pub_date=timezone.now())</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Save the object into the database. You have to call save() explicitly.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Now it has an ID.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.id</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Access model field values via Python attributes.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.question_text</span><br><span class="line">"下周五考试吗？"</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.pub_date</span><br><span class="line">datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重新赋值.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.question_text = "什么时候考试?"</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.question_text</span><br><span class="line">"什么时候考试？"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> objects.all() displays all the questions in the database.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Question.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure><p>&lt;Question: Question object (1)&gt; 对于我们了解这个对象的细节没什么帮助。让我们通过编辑 Question 模型的代码（位于 polls/models.py 中）来修复这个问题。给 Question 和 Choice 增加 <code>__str__()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'发布时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>   <span class="comment"># (了解)控制打印对象时的输出信息</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(<span class="string">'选项内容'</span>, max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(<span class="string">'投票数'</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><p>注意：这些都是常规的 Python方法。让我们添加一个自定义的方法，这只是为了演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在question类下添加一个was_publish_recently函数。</p><p>新加入的 import datetime 和 from django.utils import timezone 分别导入了 Python 的标准 datetime 模块和 Django 中和时区相关的 django.utils.timezone 工具模块。</p><p>Django提供了一个完全由关键字参数驱动的丰富的数据库查询API（带条件查询）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> get查询不到会报异常，filter查询不到返回空结果集</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Question.objects.filter(id=1)</span><br><span class="line">&lt;QuerySet [&lt;Question: 下周五考试吗？&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Question.objects.get(id=1)</span><br><span class="line">&lt;Question: 下周五考试吗？&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下面的查找与Question.objects.get(id=1)结果一样</span><br><span class="line">Question.objects.get(pk=1)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请求一个不存在的ID，会出现错误。</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; Question.objects.get(id=9999)</span><br><span class="line">会抛出一些错误栈</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 确认我们自定义的方法有效</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q = Question.objects.get(pk=1)</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; q.was_published_recently()</span><br><span class="line">→True</span><br></pre></td></tr></table></figure><p>以什么开头（模糊匹配）<br>类名.object.filter(字段__startswith=’匹配的字符串’)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;&gt; Question.objects.filter(question_text__startswith='什么')</span><br><span class="line">&lt;QuerySet [&lt;Question: 下周五考试吗？&gt;]&gt;</span><br></pre></td></tr></table></figure><p><strong>反向查询</strong></p><p>需求，查询question表中“下周五考试吗？”这个问题对应的选项，如果是sql，要先select id from question表where text=“下周”得到q的id，再select * from choice where question_id=q的id ，而orm帮我们只需要q.关联表_set.all()。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 先把一方的表的一行数据get出来，</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; question = Question.objects.get(id=1)`</span><br><span class="line">然后反向查询关联创建</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; question.choice_set.create(choice_text="周三考", votes=0)`</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; question.choice_set.create(choice_text="考试", votes=0)`</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; question.choice_set.all()</span><br><span class="line">&lt;QuerySet [&lt;Choice: 考试&gt;, &lt;Choice: 周三考&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; question.choice_set.count()</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; c = q.choice_set.filter(choice_text__startswith='xxx')</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt; c.delete()</span><br></pre></td></tr></table></figure><h2 id="django管理页面"><a href="#django管理页面" class="headerlink" title="django管理页面"></a>django管理页面</h2><p>Django全自动的根据模型创建了后台管理页面，让你的增删改查更方便</p><p>管理界面是为网站管理员使用的。</p><h3 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h3><p>首先，我们得创建一个能登录管理页面的用户。请运行下面的命令：</p><p><code>py manage.py createsuperuser</code></p><p>键入你想要使用的用户名，然后按下回车键：</p><p><code>Username: admin</code></p><p>然后提示你输入想要使用的邮件地址：</p><p><code>Email address: ***@***.com</code></p><p>最后一步是输入密码。你会被要求输入两次密码，第二次的目的是为了确认第一次输入的确实是你想要的密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><h3 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h3><p>Django 的管理界面默认就是启用的。让我们启动开发服务器，看看它到底是什么样的。</p><p>如果开发服务器未启动，用以下命令启动它：</p><p><code>py manage.py runserver</code></p><p>现在，打开浏览器，转到你本地域名的 “/admin/“ 目录， – 比如 “<a href="http://127.0.0.1:8000/admin/&quot;" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/&quot;</a> 。你应该会看见管理员登录界面：</p><p><img src="https://docs.djangoproject.com/zh-hans/2.1/_images/admin01.png" alt=""></p><h3 id="进入管理站点页面"><a href="#进入管理站点页面" class="headerlink" title="进入管理站点页面"></a>进入管理站点页面</h3><p>现在，试着使用你在上一步中创建的超级用户来登录。然后你将会看到 Django 管理页面的索引页：</p><p><img src="https://docs.djangoproject.com/zh-hans/2.1/_images/admin02.png" alt=""></p><h3 id="向管理页面中加入投票应用"><a href="#向管理页面中加入投票应用" class="headerlink" title="向管理页面中加入投票应用"></a>向管理页面中加入投票应用</h3><p>但是我们的投票应用在哪呢？它没在索引页面里显示。</p><p>打开 polls/admin.py 文件，把它编辑成下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br><span class="line">admin.site.register(Choice)</span><br></pre></td></tr></table></figure><p>然后打开管理页面看看效果吧。</p><hr><p><strong>参考</strong></p><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">django官方文档</a></p><p><a href="https://forali.club/" target="_blank" rel="noopener">余某人的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库API&quot;&gt;&lt;a href=&quot;#数据库API&quot; class=&quot;headerlink&quot; title=&quot;数据库API&quot;&gt;&lt;/a&gt;数据库API&lt;/h2&gt;&lt;p&gt;现在让我们进入交互式 Python 命令行，尝试一下 Django 为你创建的各种 API。通过以下命令打开
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="web框架" scheme="http://yoursite.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>django学习2</title>
    <link href="http://yoursite.com/2018/12/18/django%E5%AD%A6%E4%B9%A02/"/>
    <id>http://yoursite.com/2018/12/18/django学习2/</id>
    <published>2018-12-18T10:30:59.000Z</published>
    <updated>2018-12-18T11:30:53.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>现在，打开 mysite/settings.py 。这是个包含了 Django 项目设置的 Python 模块。</p><p>编辑 mysite/settings.py 文件前，先设置 TIME_ZONE 为你自己时区。</p><p>此外，关注一下文件头部的 INSTALLED_APPS 设置项。这里包括了会在你项目中启用的所有 Django 应用。应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们。</p><p>通常， INSTALLED_APPS 默认包括了以下 Django 的自带应用：</p><ul><li>django.contrib.admin – 管理员站点</li><li>django.contrib.auth – 认证授权系统</li><li>django.contrib.contenttypes – 内容类型框架</li><li>django.contrib.sessions – 会话框架</li><li>django.contrib.messages – 消息框架</li><li>django.contrib.staticfiles – 管理静态文件的框架</li></ul><p>这些应用被默认启用是为了给常规项目提供方便。</p><p>默认开启的某些应用需要至少一个数据表，所以，在使用他们之前需要在数据库中创建一些表。请执行以下命令(以下均在命令pycharm终端进行)：</p><p><strong><code>python manage.py migrate</code></strong></p><p> 这个 migrate 命令检查 INSTALLED_APPS 设置，为其中的每个应用创建需要的数据表，至于具体会创建什么，这取决于你的 mysite/settings.py 设置文件和每个应用的数据库迁移文件。这个命令所执行的每个迁移操作都会在终端中显示出来。</p><p>写给极简主义者:</p><p>就像之前说的，为了方便大多数项目，我们默认激活了一些应用，但并不是每个人都需要它们。如果你不需要某个或某些应用，你可以在运行 migrate 前毫无顾虑地从 INSTALLED_APPS 里注释或者删除掉它们。 migrate 命令只会为在 INSTALLED_APPS 里已经声明了的应用进行数据库迁移。</p><h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>在 Django 里写一个数据库驱动的 Web 应用的第一步是定义模型 - 也就是数据库结构设计和附加的其它元数据。</p><p>在这个简单的投票应用中，需要创建两个模型：问题 Question 和选项 Choice。Question 模型包括问题描述和发布时间。Choice 模型有两个字段，选项描述和当前得票数。每个选项属于一个问题。</p><p>这些概念可以通过一个简单的 Python 类来描述。按照下面的例子来编辑 polls/models.py 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'发布时间'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(<span class="string">'选项内容'</span>, max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(<span class="string">'投票数'</span>, default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>代码非常直白。每个模型被表示为 django.db.models.Model 类的子类。每个模型有一些类变量，它们都表示模型里的一个数据库字段。</p><p>每个字段都是 Field 类的实例 - 比如，字符字段被表示为 CharField ，日期时间字段被表示为 DateTimeField 。这将告诉 Django 每个字段要处理的数据类型。</p><p>每个 Field 类实例变量的名字（例如 question_text 或 pub_date ）也是字段名，所以最好使用对机器友好的格式。你将会在 Python 代码里使用它们，而数据库会将它们作为列名。</p><p>你可以使用可选的选项来为 Field 定义一个人类可读的名字。这个功能在很多 Django 内部组成部分中都被使用了，而且作为文档的一部分。如果某个字段没有提供此名称，Django 将会使用对机器友好的名称，也就是变量名。在上面的例子中，我们只为 Question.pub_date 定义了对人类友好的名字。对于模型内的其它字段，它们的机器友好名也会被作为人类友好名使用。</p><h2 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h2><p>上面的一小段用于创建模型的代码给了 Django 很多信息，通过这些信息，Django 可以：</p><ul><li>为这个应用创建数据库 schema（生成 <code>CREATE TABLE</code> 语句）。</li><li>创建可以与 <code>Question</code> 和 <code>Choice</code> 对象进行交互的 Python 数据库 API。</li></ul><p>但是首先得把 <code>polls</code> 应用安装到我们的项目里。</p><p>我们需要在配置类 INSTALLED_APPS中添加设置。因为 PollsConfig 类写在文件 polls/apps.py 中，所以它的点式路径是 polls.apps.PollsConfig。在文件 mysite/settings.py 中INSTALLED_APPS 子项添加点式路径后，它看起来像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在你的 Django 项目会包含 polls 应用。接着运行下面的命令：</p><p><code>py manage.py makemigrations polls</code></p><p>你将会看到类似于下面这样的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Migrations for &apos;polls&apos;:</span><br><span class="line">  polls/migrations/0001_initial.py:</span><br><span class="line">    - Create model Choice</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Add field question to choice</span><br></pre></td></tr></table></figure><p>通过运行 makemigrations 命令，Django 会检测你对模型文件的修改（在这种情况下，你已经取得了新的），并且把修改的部分储存为一次 迁移。</p><p>如果你想的话，你可以阅读一下你模型的迁移数据，它被储存在 polls/migrations/0001_initial.py 里。别担心，你不需要每次都阅读迁移文件，但是它们被设计成人类可读的形式，这是为了便于你手动修改它们。</p><p>sqlmigrate 命令接收一个迁移的名称，然后返回对应的 SQL：</p><p><code>py manage.py sqlmigrate polls 0001</code></p><p>其实就是相当于在数据库里建了一个表，你将会看到类似下面这样的输出（我把输出重组成了人类可读的格式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_choice&quot; (</span><br><span class="line">    &quot;id&quot; serial NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;choice_text&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;votes&quot; integer NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_question&quot; (</span><br><span class="line">    &quot;id&quot; serial NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;question_text&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;pub_date&quot; timestamp with time zone NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Add field question to choice</span><br><span class="line">--</span><br><span class="line">ALTER TABLE &quot;polls_choice&quot; ADD COLUMN &quot;question_id&quot; integer NOT NULL;</span><br><span class="line">ALTER TABLE &quot;polls_choice&quot; ALTER COLUMN &quot;question_id&quot; DROP DEFAULT;</span><br><span class="line">CREATE INDEX &quot;polls_choice_7aa0f6ee&quot; ON &quot;polls_choice&quot; (&quot;question_id&quot;);</span><br><span class="line">ALTER TABLE &quot;polls_choice&quot;</span><br><span class="line">  ADD CONSTRAINT &quot;polls_choice_question_id_246c99a640fbbd72_fk_polls_question_id&quot;</span><br><span class="line">    FOREIGN KEY (&quot;question_id&quot;)</span><br><span class="line">    REFERENCES &quot;polls_question&quot; (&quot;id&quot;)</span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>请注意以下几点：</p><ul><li>输出的内容和你使用的数据库有关</li><li>数据库的表名是由应用名和模型名的小写形式连接而来，（可以自定义此行为）</li><li>主键（ID）会被自动创建</li><li>默认的，django会在外键字段明后追加字符串_id</li><li>外键关系由FOREIGN KEY生成。</li><li>生成的SQL语句是为你所用的数据库定制的，所以那些和数据库有关的字段类型，比如auto_inctement，django会帮你自动处理。那些和引号相关的事情-例如，是单引号还是双引号，django也一样会被自动处理。</li><li>这个sqlmigrate命令并没有真正在你的数据库中的执行迁移-它只是把命令输出到屏幕上，让你看看django到底准备做什么，或者当你是数据库管理员，需要写脚本来批量处理数据库时会很有用</li></ul><p>如果你感兴趣，你也可以试试运行 python manage.py check ;这个命令帮助你检查项目中的问题，并且在检查过程中不会对数据库进行任何操作。</p><p>现在，再次运行 migrate 命令，在数据库里创建新定义的模型的数据表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...\&gt; py manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Rendering model states... DONE</span><br><span class="line">  Applying polls.0001_initial... OK</span><br></pre></td></tr></table></figure><p>这个 migrate 命令选中所有还没有执行过的迁移（Django 通过在数据库中创建一个特殊的表 django_migrations 来跟踪执行过哪些迁移）并应用在数据库上 - 也就是将你对模型的更改同步到数据库结构上。</p><p>迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表 - 它专注于使数据库平滑升级而不会丢失数据。我们会在后面的教程中更加深入的学习这部分内容，现在，你只需要记住，改变模型需要这三步：</p><ol><li>编辑 models.py 文件，改变模型。</li><li>运行 python manage.py makemigrations 为模型的改变生成迁移文件。</li><li>运行 python manage.py migrate 来应用数据库迁移。</li></ol><hr><p><strong>小结</strong></p><p>到此，算着上一篇，已经初步了解了django的使用方式以及项目和应用的关系，还有如何生成数据库。</p><ul><li>django-admin startproject mysite 创建项目</li><li>python manage.py startapp polls 创建应用</li><li>python manage.py migrate 为应用创建数据表</li><li>python manage.py makemigratetions polls 为polls应用生成迁移文件</li></ul><p>数据表模型在models.py文件中，通过ORM对数据库进行操作</p><p>settings.py中存放一些配置信息，INSTALLED_APPS设置项。这里包括了会在你项目中启用的所有Django应用。</p><p>mysite\urls.py是顶级路由，polls\urls.py是为应用创建的路由，需要在顶级路由中引用应用路由</p><p>polls\views.py中是应用的视图函数编写视图函数的返回值是一个HttpResponse。</p><p>接下来会继续学习django的admin管理应用。</p><hr><p>参考：</p><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">django官方文档</a></p><p><a href="https://forali.club/" target="_blank" rel="noopener">余某人的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库配置&quot;&gt;&lt;a href=&quot;#数据库配置&quot; class=&quot;headerlink&quot; title=&quot;数据库配置&quot;&gt;&lt;/a&gt;数据库配置&lt;/h2&gt;&lt;p&gt;现在，打开 mysite/settings.py 。这是个包含了 Django 项目设置的 Python 模块。&lt;/
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="web框架" scheme="http://yoursite.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>django学习1</title>
    <link href="http://yoursite.com/2018/12/17/django%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2018/12/17/django学习1/</id>
    <published>2018-12-17T13:22:17.000Z</published>
    <updated>2018-12-18T10:30:10.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>版本：1.x和2.x，2.x不支持python，只支持py3.5以上版本。1.x路由正则风格 2.x路由风格简单类似flask</p><p>优点：大而全，封装多种功能，开箱即用。目录结构适合中大型程序。<br>缺点：内含的功能有些用不上。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>cmd 终端 <code>pip install django</code></p><p>安装完成后 继续cmd<code>python -m django --version</code>查看版本。</p><h2 id="编写第一个Django应用程序"><a href="#编写第一个Django应用程序" class="headerlink" title="编写第一个Django应用程序"></a>编写第一个Django应用程序</h2><p>创建一个投票的应用程序。</p><p>它由两部分组成：</p><ul><li>一个公共站点，允许人们查看并在其中投票。</li><li>一个管理站点，允许您添加，更改和删除投票。</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>建议首先创建一个项目文件夹，在项目文件夹下创建项目。</p><p>在cmd终端或者pycharm终端cd到你的项目文件夹下运行以下命令：</p><p><code>django-admin startproject mysite</code></p><p>创建一个名为mysite的项目。</p><p>然后在文件夹下创建了以下文件和目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><p>这些文件是：</p><ul><li>外部<code>mysite/</code>根目录只是项目的容器。它的名字对Django来说无关紧要; 你可以将它重命名为你喜欢的任何东西。</li><li><code>manage.py</code>：一个命令行实用程序，允许您以各种方式与此Django项目进行交互。</li><li>内部<code>mysite/</code>目录是项目的实际Python包。</li><li><code>mysite/__init__.py</code>：一个空文件，告诉Python该目录应该被视为Python包。</li><li><code>mysite/settings.py</code>：此Django项目的设置/配置。</li><li><code>mysite/urls.py</code>：这个Django项目的URL声明， 就是网站的目录。</li><li><code>mysite/wsgi.py</code>：与WSGI兼容的Web服务器的入口点，用于为您的项目提供服务。</li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>让我们创建的项目跑起来…</p><p>输入以下命令：</p><p><code>python manage.py runserver</code>服务器默认运行在本地8000端口上。</p><p>更换端口：<code>py manage.py runserver 8080</code></p><p>你会在终端看到以下信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have unapplied migrations; your app may not work properly until they are applied.</span><br><span class="line">Run &apos;python manage.py migrate&apos; to apply them.</span><br><span class="line"></span><br><span class="line">December 12, 2018 - 15:50:53</span><br><span class="line">Django version 2.1, using settings &apos;mysite.settings&apos;</span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><h3 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h3><p>开发环境已经配置好了，可以开始创建一个应用了。</p><p>在Django中编写的每个应用程序都包含一个遵循特定约定的Python包。Django附带了一个实用程序，可以自动生成应用程序的基本目录结构，因此您可以专注于编写代码而不是创建目录。</p><p>cd到manage.py的同级目录下并输入以下命令：</p><p><code>python manage.py startapp polls</code></p><p>这回创建一个目录polls，布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><h3 id="编写第一个视图"><a href="#编写第一个视图" class="headerlink" title="编写第一个视图"></a>编写第一个视图</h3><p>打开文件<code>polls/views.py</code> 并在其中放入以下Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br></pre></td></tr></table></figure><p>这是Django中最简单的视图。要调用视图，我们需要将其映射到URL - 为此我们需要一个URLconf。</p><p>在polls目录下创建一个名为urls.py的文件。</p><p>在该文件下包含以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下一步是要在跟URLconf文件中指定我们创建的polls.urls模块。在mysite/urls.py的文件的urlpatterns列表里插入一个include()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在已经把index视图添加进了URLconf。要看效果，开启服务器：</p><p><code>python manage.py runserver</code></p><p>然后在浏览器访问<code>http://127.0.0.1:8000/polls/</code> 会看到在视图定义的返回值Hello, world. You’re at the polls index.</p><p>如果获得错误页面，请确定要访问的是<code>http://127.0.0.1:8000/polls/</code>而不是<code></code><a href="http://127.0.0.1:8000`" target="_blank" rel="noopener">http://127.0.0.1:8000`</a></p><hr><p>参考：</p><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">django官方文档</a></p><p><a href="https://forali.club/" target="_blank" rel="noopener">余某人的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;版本：1.x和2.x，2.x不支持python，只支持py3.5以上版本。1.x路由正则风格 2.x路由风格简单类似flask&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="web框架" scheme="http://yoursite.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>hashlib模块</title>
    <link href="http://yoursite.com/2018/12/17/hashlib%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/12/17/hashlib模块/</id>
    <published>2018-12-17T11:57:49.000Z</published>
    <updated>2018-12-17T12:16:40.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 hash"></a>哈希 hash</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>hash：概括摘要加密算法。一般的加密，比如a-z对应数字1-26，abc的密文为12345。而hash是“摘要”算法，不管1kb的txt文件还是几个G的视频最终都会生成一个固定长度的字符串。文件轻度修改最终摘要会大幅变化。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol><li>校验文件，保证文件不被第三方修改。确保下载文件没加入广告或恶意程序。</li><li>校验接口参数。api平台app_key和params生成sign签名，如果传输过程中有误或被中间人截取请求修改，name签名会不匹配，服务器检测到会丢弃。</li><li>字典，hash表，散列表。hash值作为键名提供快速访问。</li><li>密码加密。用户注册成功后把密码hash处理然后把摘要字符串存入数据库，用户登录时将用户提交的密码hash跟数据库中的字符串对比。</li></ol><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li>update(): 比较大的文件如视频可以分成多块，多次调用update()。</li><li>参数为二进制，待摘要信息是字符串的话先编码。</li><li>hex digest 生成十六进制摘要字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'待加密的文本'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><p>输出的加密后的字段为 ‘de8d731c2762076ffc9263f53ab25258’</p><p>如果这时候我们稍微改一个字，其加密后的字段就会发生很大变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'等待加密的文本'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><p>打印的结果为 ‘ dbb3a4f9055f4c7d67f6e08715894870 ‘ 。</p><h3 id="增加安全性"><a href="#增加安全性" class="headerlink" title="增加安全性"></a>增加安全性</h3><p>被攻击的手段有穷举，对撞等。hash加密并不是绝对安全。不要设置过于简单的密码。有攻击者根据弱密码字典（10万个弱密码）通过代码生成md5加密，存入一张数据库表。然后黑客会窃取网站的用户表，拿用户表的密码字段生成的密文跟自己生成的md5做比对。</p><p>方法一：加额外的字符串混淆，俗称加盐 salt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">salt = <span class="string">'abc'</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update((<span class="string">'password'</span>+salt).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(<span class="string">'md5'</span> + <span class="string">'$'</span> + salt + <span class="string">'$'</span> + md5.hexdigest())</span><br></pre></td></tr></table></figure><p>打印出来结果为 ‘ md5$abc$8223fe8dc0533c6ebbb717e7fda2833c  ‘</p><p>方法二：多次加密，重复调用update()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'password'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">str1 = md5.hexdigest()</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(str1.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">str2 = md5.hexdigest()</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(str2.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">str3 = md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初识加密字段（密文）</span></span><br><span class="line">print(str1)</span><br><span class="line"><span class="comment"># 二次加密</span></span><br><span class="line">print(str2)</span><br><span class="line"><span class="comment"># 三次加密</span></span><br><span class="line">print(str3)</span><br></pre></td></tr></table></figure><p>三次分别是：</p><p>‘ 5f4dcc3b5aa765d61d8327deb882cf99 ’<br>’ 696d29e0940a4957748fe3fc9efd22a3 ‘<br>’ 5a22e6c339c96c9c0513a46e44c39683 ‘</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;哈希-hash&quot;&gt;&lt;a href=&quot;#哈希-hash&quot; class=&quot;headerlink&quot; title=&quot;哈希 hash&quot;&gt;&lt;/a&gt;哈希 hash&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="包" scheme="http://yoursite.com/tags/%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>mysql进阶语法</title>
    <link href="http://yoursite.com/2018/12/10/mysql%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/10/mysql进阶语法/</id>
    <published>2018-12-10T12:18:40.000Z</published>
    <updated>2018-12-10T13:00:16.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql进阶语法"><a href="#mysql进阶语法" class="headerlink" title="mysql进阶语法"></a>mysql进阶语法</h2><p>首先创建俩表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table shop(</span><br><span class="line">  article int(4) unsigned zerofill default &apos;0000&apos; not null, -- 商品</span><br><span class="line">  dealer char(20) default &apos;&apos; not null, -- 经销商</span><br><span class="line">  price double(16,2) default &apos;0.00&apos; not null, -- 价格</span><br><span class="line">  primary key (article, dealer)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据，三条内容分别是商品，商家，价格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into shop values (1,&apos;A&apos;,3.45),(1,&apos;B&apos;,3.99),(2,&apos;A&apos;,10.99),(3,&apos;B&apos;,1.45),(3,&apos;C&apos;,1.69),(3,&apos;D&apos;,1.25),(4,&apos;D&apos;,19.95);</span><br></pre></td></tr></table></figure><p>查看一下我们建的表：</p><p><code>select * from shop;</code></p><p><img src="https://i.loli.net/2018/12/10/5c0e5be06d63c.png" alt=""> </p><p>查询价格最高的商品<code>select MAX(article) from shop;</code></p><p><img src="https://i.loli.net/2018/12/10/5c0e5c2fb6741.png" alt=""> </p><p>子查询，查询商品最贵的商品具体信息</p><p><code>select article,dealer,price from shop where price=(select MAX(price) from shop);</code></p><p><img src="https://i.loli.net/2018/12/10/5c0e5c8d0e606.png" alt=""> </p><p>按价格降序排序所有行，并使用LIMIT子句获取第一行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT article, dealer, price</span><br><span class="line">FROM shop                    </span><br><span class="line">ORDER BY price DESC          </span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><p>返回结果如下，只返回第一行</p><p><img src="https://i.loli.net/2018/12/10/5c0e5da1da12c.png" alt=""> </p><hr><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>首先建俩表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person(                                      </span><br><span class="line">  id int primary key auto_increment, -- id主键自增            </span><br><span class="line">  name varchar(20) not null                               </span><br><span class="line">);                                                        </span><br><span class="line">create table shirt(                                       </span><br><span class="line">  id int primary key auto_increment,                      </span><br><span class="line">  style varchar(20) not null ,                            </span><br><span class="line">  color varchar(20) not null ,                            </span><br><span class="line">  owner int references person.id -- owner列关联存储person表的id列 </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>再插入一些数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into person values (null,&apos;小明&apos;);                                               </span><br><span class="line">insert into person values (null,&apos;小红&apos;);                                               </span><br><span class="line">insert into shirt values (null,&apos;短袖&apos;,&apos;蓝&apos;,&apos;1&apos;),(null,&apos;外套&apos;,&apos;棕&apos;,&apos;1&apos;),(null,&apos;风衣&apos;,&apos;黑&apos;,&apos;1&apos;);</span><br><span class="line">insert into shirt values (null,&apos;短袖&apos;,&apos;白&apos;,&apos;2&apos;),(null,&apos;裙子&apos;,&apos;蓝&apos;,&apos;2&apos;),(null,&apos;外套&apos;,&apos;红&apos;,&apos;2&apos;);</span><br></pre></td></tr></table></figure><p>看一下shirt表长什么样</p><p><img src="https://i.loli.net/2018/12/10/5c0e5eb44c3b2.png" alt=""><br><code>select shirt.style, person.name from shirt join person on shirt.id = person.id;</code></p><p><img src="https://i.loli.net/2018/12/10/5c0e61ff0b49c.png" alt=""> </p><p>join查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select person.name, shirt.style,shirt.color from person inner join shirt on person.id=shirt.owner;</span><br></pre></td></tr></table></figure><p>就是相当于把shirt表的owner换成person表的名字了，因为创建表的时候它俩是关联的。这就是外键。</p><p><img src="https://i.loli.net/2018/12/10/5c0e62a56d769.png" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select person.name, shirt.style,shirt.color </span><br><span class="line">from person inner join shirt </span><br><span class="line">on person.id=shirt.owner </span><br><span class="line">where shirt.color = &apos;红&apos; and shirt.style = &apos;外套&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/10/5c0e634b9cdbf.png" alt=""> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql进阶语法&quot;&gt;&lt;a href=&quot;#mysql进阶语法&quot; class=&quot;headerlink&quot; title=&quot;mysql进阶语法&quot;&gt;&lt;/a&gt;mysql进阶语法&lt;/h2&gt;&lt;p&gt;首先创建俩表&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库</title>
    <link href="http://yoursite.com/2018/12/06/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/12/06/mysql数据库/</id>
    <published>2018-12-06T10:57:01.000Z</published>
    <updated>2018-12-06T13:04:25.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>流行的关系型数据库，MySQL是一个<strong>关系型数据库管理系统</strong>，由瑞典MySQL AB 公司开发，目前属于 <a href="https://baike.baidu.com/item/Oracle" target="_blank" rel="noopener">Oracle</a> 旗下产品。MySQL 是最流行的<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511" target="_blank" rel="noopener">关系型数据库管理系统</a>之一，在 WEB 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260" target="_blank" rel="noopener">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件。</p><p>MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 SQL 语言是用于访问<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728" target="_blank" rel="noopener">数据库</a>的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422" target="_blank" rel="noopener">开放源码</a>这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><p>由于其社区版的性能卓越，搭配 <a href="https://baike.baidu.com/item/PHP" target="_blank" rel="noopener">PHP</a> 和 <a href="https://baike.baidu.com/item/Apache" target="_blank" rel="noopener">Apache</a> 可组成良好的开发环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>mysql<a href="www.mysql.com">官网</a> → download → community(社区) → mysql server(服务器) → Select Operating System(选择操作系统) </p><ul><li>mis版本  .exe安装包 好处是有安装向导，自动添加环境变量，自动生成配置文件</li><li>zip archive版本   .zip压缩包。 包含mysql主要文件，但是跟windows结合部分，环境变量 服务就需要手动建立。好处是版本最新。</li></ul><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><p>cmd下切换到到数据库安装目录\bin下,  然后输入如下命令初始化数据库。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --initialize --console</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/01/5bdaf75477c37.png" alt=""></p><p>初始化完成之后这里会生成一个用户名和密码，这个很重要，用户名是root, 密码就是上面用红框标注的地方，这个一定要记下来，下面会用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld install </span><br><span class="line">#如果出错试试下一个命令</span><br><span class="line">mysqld.exe -install mysql</span><br></pre></td></tr></table></figure><p>再输入以下命令启动mysql服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><h2 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h2><p>当MySQL服务已经运行时，输入<code>mysql -u root -p</code>登录mysql，然后输入之前生成的密码。</p><p>登录进去以后输入 <code>ALTER USER &quot;root&quot;@&quot;localhost&quot; IDENTIFIED BY &quot;新密码&quot;</code>来修改密码。</p><p>登录成功的页面：</p><p><img src="https://i.loli.net/2018/11/01/5bdaf93773a96.png" alt=""></p><p>-u 表示用户，-p表示密码</p><h2 id="mysql语法"><a href="#mysql语法" class="headerlink" title="mysql语法"></a>mysql语法</h2><h3 id="创建和选择数据库"><a href="#创建和选择数据库" class="headerlink" title="创建和选择数据库"></a>创建和选择数据库</h3><p>在终端输入下面的命令来创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;CREATE DATABASE menagerie;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/12/06/5c0908ffea863.png" alt=""> </p><p>返回这一条说明创建成功。</p><p>注意命令要分号结尾。</p><p>选择menagerie为当前数据库，使用以下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE menagerie</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建表之前我们先看一下数据库里有没有表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>返回empty  说明是空。</p><p>使用<code>CREATE TABLE</code>语句创建一个pet表并指定它的布局：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),</span><br><span class="line">    -&gt; species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);</span><br></pre></td></tr></table></figure><p>创建好之后 敲下<code>SHOW TABLES;</code>会有以下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+---------------------+</span><br><span class="line">| Tables in menagerie |</span><br><span class="line">+---------------------+</span><br><span class="line">| pet                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p>验证以下表是否是按照预期的方式创建，敲下<code>DESCRIBE pet;</code> </p><p><strong>再次强调 句尾分号不能少。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESCRIBE pet;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| name    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| owner   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| species | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| sex     | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birth   | date        | YES  |     | NULL    |       |</span><br><span class="line">| death   | date        | YES  |     | NULL    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><h3 id="mysql语句"><a href="#mysql语句" class="headerlink" title="mysql语句"></a>mysql语句</h3><p>首先我们往表里插入几条数据条数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO pet</span><br><span class="line">    -&gt; VALUES (&apos;阿黄&apos;,&apos;小明&apos;,&apos;狗&apos;,&apos;m&apos;,&apos;2003-02-04&apos;,&apos;2006-02-04&apos;);</span><br><span class="line">mysql&gt; INSERT INTO pet</span><br><span class="line">    -&gt; VALUES (&apos;Whisler&apos;,&apos;Gwen&apos;,&apos;鸟&apos;,&apos;m&apos;,&apos;1997-12-09&apos;,&apos;2008-12-06&apos;);</span><br><span class="line">mysql&gt; INSERT INTO pet</span><br><span class="line">    -&gt; VALUES (&apos;阿花&apos;,&apos;小红&apos;,&apos;猫&apos;,&apos;f&apos;,&apos;2010-12-09&apos;,NULL);</span><br><span class="line">mysql&gt; INSERT INTO pet</span><br><span class="line">    -&gt; VALUES (&apos;阿明&apos;,&apos;小明&apos;,&apos;狗&apos;,&apos;f&apos;,&apos;2003-02-04&apos;,NULL);</span><br></pre></td></tr></table></figure><h4 id="检索语句"><a href="#检索语句" class="headerlink" title="检索语句"></a>检索语句</h4><p>从表中检索所有内容：</p><p>输入<code>SELECT * FROM pet</code></p><p><img src="https://i.loli.net/2018/12/06/5c0910449f754.png" alt=""> </p><h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><p>选择特定行：</p><p><img src="https://i.loli.net/2018/12/06/5c0911e06ad45.png" alt=""> </p><p>多个条件并列查询，用and：</p><p><img src="https://i.loli.net/2018/12/06/5c091267f3950.png" alt=""> </p><p>多个条件查询也可以用in：</p><p><img src="/2018/12/06/mysql数据库/多条数据查询in.png" alt=""></p><p>用不等于号查询数据，我称之为‘非’ ：</p><p>!= 和 &lt;&gt; 效果相同。</p><p><img src="/2018/12/06/mysql数据库/条件语句-非.png" alt=""></p><p>选择特定列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name, birth FROM pet;</span><br><span class="line">mysql&gt; SELECT owner FROM pet;</span><br></pre></td></tr></table></figure><p>语法如上，具体不再展示，自己尝试。</p><h4 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h4><p>使用update语句可以更新数据</p><p>但是如果不加条件就会把整个表的数据都更新</p><p>如下：</p><p><img src="https://i.loli.net/2018/12/06/5c0914a1f0b2f.png" alt=""> </p><p>所以，我们给他指定一个条件让其更新：</p><p><img src="https://i.loli.net/2018/12/06/5c0915e3bfc5a.png" alt=""> </p><h4 id="行排序展示"><a href="#行排序展示" class="headerlink" title="行排序展示"></a>行排序展示</h4><p>ORDER BY  语句为行排序。</p><p><img src="/2018/12/06/mysql数据库/正序和倒序查询.png" alt=""></p><p>前者为正序排列 后者在结尾加一个desc为倒序排列。</p><h4 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h4><p>用这个语句可以统计一下年龄：</p><p><img src="/2018/12/06/mysql数据库/计算时间差.png" alt=""></p><h4 id="模式匹配-通配符"><a href="#模式匹配-通配符" class="headerlink" title="模式匹配(通配符)"></a>模式匹配(通配符)</h4><p>%为通配符  </p><p><img src="/2018/12/06/mysql数据库/模式匹配字符.png" alt=""></p><p>把关键字放在%后面 可以匹配以关键字结尾的数据：</p><p><img src="/2018/12/06/mysql数据库/结尾匹配.png" alt=""></p><p>包含匹配</p><p><img src="/2018/12/06/mysql数据库/包含匹配.png" alt=""></p><p>按字符数匹配：</p><p><img src="/2018/12/06/mysql数据库/按字符数匹配.png" alt=""></p><h4 id="count-记行数"><a href="#count-记行数" class="headerlink" title="count 记行数"></a>count 记行数</h4><p><code>SELECT COUNT(*) FROM pet；</code></p><p><img src="https://i.loli.net/2018/12/06/5c091953b0e66.png" alt=""> </p><p>如果您想了解每位业主拥有多少宠物，可以使用如下语句：</p><p><img src="https://i.loli.net/2018/12/06/5c091a0eddc03.png" alt=""> </p><p>每种动物数量：</p><p><img src="https://i.loli.net/2018/12/06/5c091a5075064.png" alt=""> </p><p>每性别的动物数量：</p><p><img src="https://i.loli.net/2018/12/06/5c091a92ba72c.png" alt=""> </p><p>每种物种和性别组合的动物数量：</p><p><img src="https://i.loli.net/2018/12/06/5c091afabef4f.png" alt=""></p><h4 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h4><p><strong>关闭数据库 \q  quit  exit 三者都行</strong></p><hr><p><strong>关于大小写，大小写大小混着写都可以识别，但是尽量写大小 ，看着比较规范。但是大家懒省事，都写小写。我也懒，但是会慢慢改进，尽量写大写。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql&quot;&gt;&lt;a href=&quot;#mysql&quot; class=&quot;headerlink&quot; title=&quot;mysql&quot;&gt;&lt;/a&gt;mysql&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>基于flask框架的备忘录</title>
    <link href="http://yoursite.com/2018/12/03/%E5%9F%BA%E4%BA%8Eflask%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://yoursite.com/2018/12/03/基于flask框架的备忘录/</id>
    <published>2018-12-03T12:10:48.000Z</published>
    <updated>2018-12-17T13:21:18.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p>用flask框架写一个小小的备忘录。是一个很简单的静态前端页面。记录一下将要做的事。</p><p>功能比较简单，但是我会持续更新，如果我掌握了更牛逼的技术，我会第一时间来更新。</p><p>先来看一下成品是什么样的</p><p><img src="https://i.loli.net/2018/12/03/5c051efbbc4aa.png" alt=""> </p><p>结构很简单，技术有限，就弄一个头部div标签，一个form表单，一个table表格就完事了。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>在表单里写下将要做的事，添加进去，其实是添加到mongodb数据库里了。然后再给它从前端页面展示出来。</li><li>添加进去状态是未完成，然后点击√ ，状态变成已完成并且背景变色。</li><li>点击×号删除此条记录。</li></ul><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>新建一个flask工程，这里以pycharm为例</p><p><img src="https://i.loli.net/2018/12/03/5c05213128985.png" alt=""> </p><p><img src="https://i.loli.net/2018/12/03/5c0521b9cc898.png" alt=""></p><p>在templates文件夹下，新建一个base.html文件和index.html文件</p><p><img src="https://i.loli.net/2018/12/03/5c052202cefcd.png" alt=""></p><p>app.py文件里的初始状态是这样的</p><p><img src="https://i.loli.net/2018/12/03/5c0522c02be0c.png" alt=""></p><p> 我们先给它来个基本的架构，说白了就是增删改查。并且路由一定 要配置好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,url_for,redirect,request</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'get'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/add',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/finish')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>头部的包别忘记引用，很重要。</p><p>另外base.html是基础模板，头部别忘引用bootstrap css js,jquery</p><p><img src="https://i.loli.net/2018/12/03/5c0524f3d23f2.png" alt=""> </p><p>然后index.html是继承的base.html模板</p><p><img src="https://i.loli.net/2018/12/03/5c0525fcbf9a3.png" alt=""> </p><p>首先来个标题，高效率 慢生活。是不是逼格满满</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: #6c996a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: papayawhip; text-align: center"</span>&gt;</span>高效率  慢生活<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再给来一个form表单，单独放在一个div里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todo-add"</span> <span class="attr">style</span>=<span class="string">"background-color: #4f8397; width: 1000px; margin: 0 auto;"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for('add') &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">5</span> <span class="attr">cols</span>=<span class="string">50</span> <span class="attr">placeholder</span>=<span class="string">"请输入待办事项"</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todo-list"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black; margin: 0 auto;"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% for todo in todo_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; loop.index &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% if todo.status == 0 %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>未完成<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% elif todo.status == 1 %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('delete', content=todo.content) &#125;&#125;"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('finish',content=todo.content) &#125;&#125;"</span>&gt;</span>√<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是后台页面</p><p>首先是主页面，这里最后给他重定向到了get页面。为了展示todo列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'get'</span>))</span><br></pre></td></tr></table></figure><p>get函数，展示todo列表。这里最后把get页面渲染到index页面，而主页给重定向到get页面了。</p><p>反正就是它俩互相定向。最后把todo列表展示出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/get')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 展示todo列表</span></span><br><span class="line">    todo_list = db.todo.find(&#123;&#125;)</span><br><span class="line">    print(todo_list)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, todo_list=todo_list)</span><br></pre></td></tr></table></figure><p>添加todo的函数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/add',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 增加一条todo """</span></span><br><span class="line">    form = request.form</span><br><span class="line">    content = form[<span class="string">'content'</span>]</span><br><span class="line">    print(content)</span><br><span class="line">    <span class="keyword">if</span> content:</span><br><span class="line">        affected_id = db.todo.insert_one(&#123;</span><br><span class="line">            <span class="string">"content"</span>: content,</span><br><span class="line">            <span class="string">"creat_time"</span>: datetime.now(),</span><br><span class="line">            <span class="string">"status"</span>: <span class="number">0</span>,  <span class="comment"># 0未完成 1已完成,</span></span><br><span class="line">            <span class="string">"finish_time"</span>: <span class="keyword">None</span></span><br><span class="line">        &#125;)</span><br><span class="line">        print(affected_id)</span><br><span class="line">        <span class="keyword">if</span> affected_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><p>更新状态  这里用到update语法，从前端接收的content是让后台识别为哪一条数据，从而修改他的status为1,1的状态的已完成。实现点击对号，状态更改，颜色更改的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/finish')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 更新状态为已完成</span></span><br><span class="line">    args = request.args</span><br><span class="line">    content = args[<span class="string">'content'</span>]</span><br><span class="line">    print(content)</span><br><span class="line">    db.todo.update(</span><br><span class="line">        &#123;<span class="string">'content'</span>: content&#125;,</span><br><span class="line">        &#123;<span class="string">'$set'</span>: &#123;<span class="string">'status'</span>: <span class="number">1</span>&#125;&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><p>删除一条todo, 用到remove语法。删除的道理同上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 删除无用的todo</span></span><br><span class="line"></span><br><span class="line">    args = request.args</span><br><span class="line">    content = args[<span class="string">'content'</span>]</span><br><span class="line">    print(content)</span><br><span class="line">    affect_id = db.todo.remove(&#123;</span><br><span class="line">        <span class="string">"content"</span>: content</span><br><span class="line">    &#125;)</span><br><span class="line">    print(affect_id)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Todo&quot;&gt;&lt;a href=&quot;#Todo&quot; class=&quot;headerlink&quot; title=&quot;Todo&quot;&gt;&lt;/a&gt;Todo&lt;/h2&gt;&lt;p&gt;用flask框架写一个小小的备忘录。是一个很简单的静态前端页面。记录一下将要做的事。&lt;/p&gt;
&lt;p&gt;功能比较简单，但是我会持
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="http://yoursite.com/2018/12/01/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/12/01/前端基础/</id>
    <published>2018-12-01T06:38:08.000Z</published>
    <updated>2018-12-01T07:45:10.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要学前端"><a href="#为什么要学前端" class="headerlink" title="为什么要学前端"></a>为什么要学前端</h2><ol><li>web网站开发做准备</li><li>爬虫做准备</li><li>跟前端同事配合</li><li>为全栈工程师做准备</li><li>后端开发也能做出展示性项目</li></ol><h2 id="流行的技术栈"><a href="#流行的技术栈" class="headerlink" title="流行的技术栈"></a>流行的技术栈</h2><ul><li>html</li><li>css</li><li>js</li><li>flash(淘汰)</li><li>nodejs</li><li>vue</li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>html:超文本标记语言。超文本，不止文本，还有图片、视频、下载内容、用户交互等。 标记语言：编程语言有逻辑控制if else、变量、方法、类。标记语言相比较为简单，由信息和结构语法构成。</p><p>历史：html4 将要学习的内容。在html4的基础上，添加新功能和语法，就是html5，h5，但是95%都是一样的。好像py2升级到py3一样。xhtml是一种语法严格版的html，用的不多。</p><h3 id="html基础结构"><a href="#html基础结构" class="headerlink" title="html基础结构"></a>html基础结构</h3><p>先写一个简单的静态页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签：&lt;&gt; 括住的叫标签，不同功能和结构。一般成对儿出现 开始<xxx> 结束关闭</xxx>，标签中可以填写内容。标签可以没有闭标签。标签内键=值的形式，键叫做属性，属性可以设置标签的行为。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;: 网页的根节点</span><br><span class="line">&lt;head&gt;: 一些声明和引用和元信息</span><br><span class="line">&lt;body&gt;: 网页的主要内容</span><br></pre></td></tr></table></figure><p>标签可以嵌套，代码风格 每一级标签缩进2个空格或4个空格。</p><p>运行： pycharm空白右键run，资源管理中双击用默认浏览器打开。</p><p>得到下图</p><p><img src="/2018/12/01/前端基础/1.png" alt=""></p><h3 id="html常用标签"><a href="#html常用标签" class="headerlink" title="html常用标签"></a>html常用标签</h3><p><strong>常用标签：</strong></p><ul><li>meta标签：元信息，对象的一些基本信息。有多种属性。charset属性声明网页应该用什么字符集编解码。</li><li>title标签：内容会显示在浏览器标签页的头部。</li><li>h1- h6标签： head，显示章节标题，h1的内容最大，h6最小。</li><li>p标签: paragraph 段落。</li><li>hr标签：horizon水平线 。</li><li>br标签：换行</li></ul><p><strong>几个关于文字效果的标签：</strong></p><ul><li>b标签 ：bold加粗</li><li>i标签： italic 斜体</li><li>em: emphasize text  强调文本</li><li>strong： 强调文本</li><li>small： 弱化文本 。字小颜色浅字体细。</li></ul><p>接下来我们写一个静态网页来具体实现以下上面的标签具体效果是怎样的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!--第一行可以不写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  <span class="comment">&lt;!-- lang属性可以不写 。或者lang="zh"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!-- 元信息  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color: #b4ff6f"</span>&gt;</span> <span class="comment">&lt;!-- 样式，在接下来的css会讲到 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>Python学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    死亡如风，常伴吾身</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>懦弱之举，我绝不姑息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我于杀戮之中盛放，亦如黎明中的花朵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        文字效果</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面效果如下图所示</p><p><img src="/2018/12/01/前端基础/2.png" alt=""></p><p>插播一条基础面试题：什么是标签、内容、属性、值？<br>标签：</p><p>形如<code>&lt;xxx&gt; &lt;/xxx&gt; ,&lt;xxx&gt;</code>是标签开始<code>&lt;/xxx&gt;</code>标签结束。标签中填写内容。一些不要内容的标签，例如<code>&lt;br&gt;&lt;hr&gt;</code>省略闭标签。标签有自己的特定功能，定义html的具体结构。<br>属性：</p><p>写在标签中，定义标签的具体行为或额外的设置。一个标签通常有多种属性，例如id class background-color align等。属性键=”值”，跟python里的dict类似。<br>文档：顶级html标签就表示网页这个文档。</p><p>常用属性：<br>style:  样式。style=”background-color: yellow”<br>align： 字体对齐方式。 align=”center”</p><p>这在后面的css里都会提到。</p><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><p>这里就不再赘述实现效果了，因为实在过于基础。日后忘了怎么用的话基本看一眼就懂了。这里我只写用法。</p><p>a标签： anchor 锚链接。点击时跳转到另一个网页。<br>功能：</p><ol><li>跳转到一个互联网网页</li><li>跳转本地项目其它网页</li><li>当前页面定位到某一地方</li><li>图片跳转</li><li>href属性： hyperlink reference 超链接引用。值是网址或其它html文件本地地址。</li><li>target属性：默认值_self , _blank  会在新标签页打开链接。</li><li>图片作为一个链接：<code>&lt;a&gt;&lt;img&gt;&lt;/a&gt;</code></li><li>本页面跳转到本页某一处： 先给标签id值，然后a标签的地址写成要跳转目的地标签的id值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>超文本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        锚链接示例<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        百度<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        本地html<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"3-html常用标签.html"</span>&gt;</span>跳转到本地其它网页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        锚链接打开方式<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        当前标签页中打开<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        新标签页中打开<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        图片跳转</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"智游logo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 点击图片会跳转到到href里的链接里 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>网页快速定位 ，锚链接根据id属性跳转<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#p1"</span>&gt;</span>跳转到第一章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#p5"</span>&gt;</span>跳转到第六章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">        第一章lalalallalabakbjaskljkja</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span></span><br><span class="line">        lalalallalabakbjaskljkja</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span>&gt;</span></span><br><span class="line">        lalalallalabakbjaskljkja</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p4"</span>&gt;</span></span><br><span class="line">        lalalallalabakbjaskljkja</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p5"</span>&gt;</span></span><br><span class="line">        lalalallalabakbjaskljkja</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p6"</span>&gt;</span></span><br><span class="line">        lalalallalabakbjaskljkja</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html表格"><a href="#html表格" class="headerlink" title="html表格"></a>html表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">"center"</span> &gt;</span>表格练习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px;"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellpadding</span>=<span class="string">"5px;"</span> <span class="attr">cellspacing</span>=<span class="string">" 20px;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张鸿飞<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>王鲲鹏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>列合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>行合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>balabala<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>balabala<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体的效果如下图</p><p><strong>table标签: 表格。</strong></p><ul><li>tr标签： table row  表格中的一行。</li><li>th标签： table head 表头</li><li>td标签： table data 表格数据一格</li></ul><p><strong>属性：</strong></p><ul><li>border：          边界</li><li>align：              表格对齐方式</li><li>bgcolor：         表格背景颜色</li><li>background：  背景图片</li><li>cellpadding:      一格内文字距离边界的距离</li><li>cellspacing:      格与格之间的距离。</li><li>colspan :           列合并</li><li>rowspan ：       行合并</li><li>border-collapse:  边框合并为单线</li></ul><p><img src="/2018/12/01/前端基础/3.png" alt=""></p><hr><h3 id="html图片"><a href="#html图片" class="headerlink" title="html图片"></a>html图片</h3><p>img标签：image 图片。<br>属性：<br>src：source 资源路径，必写项。可以是本地项目路径，也可以是互联网上的路径。<br>width： 宽 。默认单位是px像素。长度单位还可以写成百分比形式。<br>height： 高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        引用本地图片</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xx.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;p&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用互联网图片--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;img src="https://www.1owo.com/flask/%E6%A1%86%E6%9E%B6/flask-flask%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/pycharm2.png"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/p&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        地址出错</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xx.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        图片缩放</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"智游logo.jpg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"200%"</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要学前端&quot;&gt;&lt;a href=&quot;#为什么要学前端&quot; class=&quot;headerlink&quot; title=&quot;为什么要学前端&quot;&gt;&lt;/a&gt;为什么要学前端&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;web网站开发做准备&lt;/li&gt;
&lt;li&gt;爬虫做准备&lt;/li&gt;
&lt;li&gt;跟前端同事配合&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>包</title>
    <link href="http://yoursite.com/2018/12/01/%E5%8C%85/"/>
    <id>http://yoursite.com/2018/12/01/包/</id>
    <published>2018-12-01T02:26:17.000Z</published>
    <updated>2018-12-01T03:34:51.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="os包"><a href="#os包" class="headerlink" title="os包"></a>os包</h2><p>os包：operate system，主要负责新建文件，改文件名，路径，操作电脑系统相关的功能，是一个内置包。</p><p>首先在开头引入包 <code>import os</code></p><ol><li><p><code>os.path.exists()</code> 判断是否存在文件</p><p><code>print(os.path.exists(&#39;app.py&#39;))</code>  如果存在app.py则返回True</p></li><li><p><code>os.rename()</code>       重命名</p><p><code>os.rename(&#39;aaa.txt&#39;, &#39;bbb.txt&#39;)</code>前者是老名字，后者是改过后的新名字。</p></li><li><p><code>os.remove()</code>      删除文件，括号内为文件名</p></li><li><code>os.mkdir()</code>         新建文件夹 ，括号内是文件夹名字</li><li><code>os.listdir()</code>     列出当前文件夹下的文件</li><li><code>os.chdir()</code>         切换当前文件夹</li><li><p><code>os.getcwd()</code>       获取当前py所在的文件夹。</p></li><li><p><code>os.path.join(&#39;d:/python课件/os包/&#39;,&#39;me.txt&#39;)</code> 拼接文件路径</p></li></ol><p>这部分知识不难，但是内容很繁杂，没必要刻意去记。用的时候翻出来会用就行。</p><hr><h2 id="time包和datetime包"><a href="#time包和datetime包" class="headerlink" title="time包和datetime包"></a>time包和datetime包</h2><p>time包和datetime包都是时间处理的包</p><h3 id="datetime包"><a href="#datetime包" class="headerlink" title="datetime包"></a>datetime包</h3><p>首先在开头引入包</p><p><code>from datetime import datetime,timedelta</code></p><ol><li><p><code>datetime.now()</code>返回当前时间，字符串，方便进行日期加减等处理。这里的datetime是import后面的datetime。如果开头引入的时候写成<code>import datetime</code>，那这个就应该写成<code>datetime.datetime.now()</code>然后再打印出来。</p></li><li><p>创建datetime对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dt = datetime(<span class="number">2018</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">55</span>,<span class="number">00</span>)</span><br><span class="line">print(dt.year)</span><br><span class="line">print(dt.hour)</span><br></pre></td></tr></table></figure><p>执行完我们发现第一个打印出来是2018，第二个打印出来是10</p></li><li><p>日期加减，用于判断活动截止，定时，或者任务之类的。</p><p><code>print(datetime.now() + timedelta(days=1, hours=10))</code>打印出来发现时间是一天零十个小时之后的时间。</p></li><li><p>格式化时间输出  strftime  </p><p><code>print(datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;))</code></p><p>打印出来时间是按照小括号里的格式进行打印2018-12-01 11:03:35</p></li></ol><hr><h3 id="time包"><a href="#time包" class="headerlink" title="time包"></a>time包</h3><ol><li><p>生成时间戳 <code>time()</code>，整数形式的时间戳 timestamp：当前时间减去1970-1-4 0:0:0的秒数，把时间量化成数字，比较时间先后顺序。计算转换有优势，缺点是可读性差。默认长度只能表示到2038年。</p><p><code>print(time.time())</code> 可以试着打印出来看一下。</p></li><li><p>生成本地时间<code>time.localtime()</code></p><p>我们打印一下<code>print(time.localtime())</code> 发现打印出的结果是<strong>time.struct_time(tm_year=2018, tm_mon=12, tm_mday=1, tm_hour=11, tm_min=11, tm_sec=57, tm_wday=5, tm_yday=335, tm_isdst=0)</strong>，里面的内容什么意思我觉得能猜个大概，比如里面的yday=35 ，我猜测意思可能是今天是今年的第335天，离这一年过去还有60天。</p></li><li><p>格式化时间，time和datetime略有不同</p><p><code>print(time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime()))</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;os包&quot;&gt;&lt;a href=&quot;#os包&quot; class=&quot;headerlink&quot; title=&quot;os包&quot;&gt;&lt;/a&gt;os包&lt;/h2&gt;&lt;p&gt;os包：operate system，主要负责新建文件，改文件名，路径，操作电脑系统相关的功能，是一个内置包。&lt;/p&gt;
&lt;p&gt;首先在
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="包" scheme="http://yoursite.com/tags/%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>类的继承</title>
    <link href="http://yoursite.com/2018/11/30/%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/11/30/类的继承/</id>
    <published>2018-11-30T12:54:53.000Z</published>
    <updated>2018-11-30T13:16:00.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引题</strong>：生活例子。手机类，OPPO手机类、华为手机类看做是手机类里的对象；但oppo手机也可以称作一个类，这个类下又包含find系列、R系列类，R系列类又包含某某具体型号对象。类有包含、继承的关系。</p><p>首先我们写两个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, salary, subject, address)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.salary = salary</span><br><span class="line">        self.subject = subject</span><br><span class="line">        self.address = address</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_work</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, hobby, parent_info)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.hobby = hobby</span><br><span class="line">        self.parent_info = parent_info</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>可以看得出来上面的代码类与相似的类有重复的属性和方法，书写麻烦。</p><p>所以python引入了类继承机制，继承是类的三大特性之一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span>  <span class="comment"># 动物类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'动物在跑'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 狗狗类 是动物类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'狗会游泳'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 猫咪类 也是动物类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl_tree</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'猫会爬树'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'猫灵活地跑'</span>)</span><br><span class="line"></span><br><span class="line">dog1 = Dog(<span class="string">'阿黄'</span>)</span><br><span class="line">dog1.run()</span><br><span class="line">dog1.swim()</span><br><span class="line">cat1 = Cat(<span class="string">'小花'</span>)</span><br><span class="line">cat1.run()</span><br><span class="line">cat1.crawl_tree()</span><br></pre></td></tr></table></figure><p>代码的最后<code>dog1.run()</code>执行以后发现打印出来的是’动物在跑’，而run()函数是动物类中的函数。这说明子类继承父类所有的属性、方法: Dog类实例化用的是父类Animal类中的<strong>init</strong>() 和run()。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;引题&lt;/strong&gt;：生活例子。手机类，OPPO手机类、华为手机类看做是手机类里的对象；但oppo手机也可以称作一个类，这个类下又包含find系列、R系列类，R系列类又包含某某具体型号对象。类有包含、继承的关系。&lt;/p&gt;
&lt;p&gt;首先我们写两个类&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>类和对象</title>
    <link href="http://yoursite.com/2018/11/30/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/11/30/类和对象/</id>
    <published>2018-11-30T11:12:51.000Z</published>
    <updated>2018-11-30T12:53:47.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识类和对象"><a href="#初识类和对象" class="headerlink" title="初识类和对象"></a>初识类和对象</h2><p><strong>引题</strong>：回忆之前没有函数时的写法，有函数封装之后的写法。</p><ol><li>单条语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置三个圆的半径 求面积</span></span><br><span class="line">r1 = <span class="number">3</span></span><br><span class="line">r2 = <span class="number">4</span></span><br><span class="line">r3 = <span class="number">5.5</span></span><br><span class="line">print(<span class="string">'圆的面积：'</span>, r1*r1*<span class="number">3.14</span>)</span><br><span class="line">print(<span class="string">'圆的面积：'</span>, r2*r2*<span class="number">3.14</span>)</span><br><span class="line">print(<span class="string">'圆的面积：'</span>, r3*r3*<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>函数   封装功能，抽象出解决问题的公共过程。调用时传入参数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_area</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> r*r*<span class="number">3.14</span></span><br><span class="line">calulate_area(r1)</span><br><span class="line">calulate_area(r2)</span><br><span class="line">calulate_area(r3)</span><br></pre></td></tr></table></figure><ol start="3"><li>类，面向对象</li></ol><p>这里建一个学生的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># __init__() 是初始化函数，定义初始化的值，不需要手动调用。</span></span><br><span class="line">    <span class="comment"># 初始化函数会先调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score ,sex)</span>:</span></span><br><span class="line">        <span class="comment"># 等号右侧的name是__init__()函数执行时传过来的参数</span></span><br><span class="line">        <span class="comment"># 变量的名字前面加上self.可以理解为能够在这个类里全局调用</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        self.sex = sex</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在类中定义一个函数</span></span><br><span class="line">    <span class="comment"># 类中函数的第一个参数必须是固定的self</span></span><br><span class="line">    <span class="comment"># self由解释器自动传参，self后面是自定义参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;的成绩是&#123;&#125;'</span>.format(self.name, self.score))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_sex</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;的性别是&#123;&#125;'</span>.format(self.name, self.sex))</span><br></pre></td></tr></table></figure><p>函数写好了，具体的意思都写在代码注释里了。写好了但是还没完 ，我们必须要调用对象方法.接着上面的代码写。注意这里！调用和实例化的代码缩进要和上面类一样。也就是顶格写。！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化，通俗一点的说是把括号内的参数传到Student类里面。</span></span><br><span class="line"><span class="comment"># 并且他们被__init__()函数所调用。</span></span><br><span class="line">stu1 = Student(<span class="string">'小明'</span>, <span class="number">90</span>, <span class="string">'男'</span>)</span><br><span class="line">stu2 = Student(<span class="string">'小红'</span>, <span class="number">80</span>, <span class="string">'女'</span>)</span><br><span class="line"><span class="comment"># 调用对象方法</span></span><br><span class="line">print(stu1.name) <span class="comment"># 这里可以打印一下看看会输出什么。</span></span><br><span class="line">stu1.print_score()</span><br><span class="line">stu2.print_sex()</span><br></pre></td></tr></table></figure><p>类class和实例instance（重点）：“人类”和“小明”。类是许多个体的集合，一个抽象名词、统称。’小明’或者 “你自己” 或“特普朗” 这些都是人类这个集合中一个个具体的人、个体。那么我们把类中具体的个体叫“对象”、“实例”。  再举几个例子：水果类包含苹果、梨。 电子产品类，电脑，手机。 手机类，苹果，华为。<br>属性attribute，成员方法：一类事物的特性叫做属性，例如Student类中的name、score、sex。类中个体、成员具备的功能、方法叫做成员方法。</p><p>语法：类关键字class  类名()： 类方法。<br>驼峰命名：（约定俗成）每一个单词挨着写并且首字母大写。例如：ElectronicProduct。java中常见。</p><hr><hr><h2 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h2><p>上面的例子学生类里的属性可以读也可以被修改，这样会导致安全问题，比如小明修改成绩。在上面例子下面加两行代码</p><p><code>stu1.score = 100</code></p><p><code>print(stu1.score)</code></p><p>这时候我们发现打印出来小明的成绩已经变成100分。</p><p>下面是类的私有属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score, sex, password)</span>:</span></span><br><span class="line">        <span class="comment"># 双下划线开头的属性不能直接访问，这样确保了安全性。</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">        self.__sex = sex</span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line">stu1 = Student2(<span class="string">'小明'</span>, <span class="number">90</span>, <span class="string">'男'</span>, <span class="string">'12345'</span>)</span><br><span class="line">print(stu1.__password)</span><br></pre></td></tr></table></figure><p>如果执行上面的代码 那打印出来就会报错AttributeError: ‘Student2’ object has no attribute ‘__password’</p><p>而且在下面输入<code>stu1.__score = 100</code>这种强行赋值的方法也会报错</p><p>但是有的时候我们又想获取对象的信息怎么办呢？</p><p> gtter和setter函数了解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score, sex, password)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">        self.__sex = sex</span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询分数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改分数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'分数输入错误'</span>)</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">stu1 = Student3(<span class="string">'小明'</span>, <span class="number">90</span>, <span class="string">'男'</span>, <span class="string">'12345'</span>)</span><br><span class="line">print(stu1.get_score())</span><br><span class="line">stu1.set_score(<span class="number">100</span>)</span><br><span class="line">print(stu1.get_score())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初识类和对象&quot;&gt;&lt;a href=&quot;#初识类和对象&quot; class=&quot;headerlink&quot; title=&quot;初识类和对象&quot;&gt;&lt;/a&gt;初识类和对象&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;引题&lt;/strong&gt;：回忆之前没有函数时的写法，有函数封装之后的写法。&lt;/p&gt;
&lt;ol&gt;

      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="基础，python，类" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%EF%BC%8Cpython%EF%BC%8C%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://yoursite.com/2018/11/29/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/11/29/git学习/</id>
    <published>2018-11-29T04:52:24.000Z</published>
    <updated>2018-11-30T10:04:17.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git优势"><a href="#git优势" class="headerlink" title="git优势"></a>git优势</h2><p>git能大幅提高工作效率</p><ol><li>记录每次代码变更的内容和时间点，如果代码丢失或崩溃，可以快速回复到之前任意时间点版本。</li><li>多人协作。如果代码冲突可以直观看到并解决。合并多人代码时较方便。</li></ol><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><ol><li>理解 本地、暂存区、提交、远程仓库。</li><li>先学基本命令，随着项目慢慢熟练。先不要看高级命令，因为几乎用不到。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>廖雪峰git教程点<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">这里</a></li><li>玩游戏学git点<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">这里</a></li></ol><h1 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在项目文件夹根目录下右键git bash</p><p>git init  。初始化本地仓库git，会看到项目文件夹下生成.git隐藏文件夹，这个文件夹会记录以后每次的更改和提交</p><p><img src="/2018/11/29/git学习/2.png" alt=""></p><p><img src="/2018/11/29/git学习/1.png" alt=""></p><p>git config –global user.name  第一次使用git配置初始化用户名</p><p>git config –global user.email 配置邮箱</p><p><img src="/2018/11/29/git学习/3.png" alt=""></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>git add 文件名 。跟踪一个文件。例如git add 1.py</p><p>git add .   。跟踪当前文件夹下所有文件</p><p>git merge 副分支。合并分支内容到当前分支</p><p>git log   查看记录</p><p>git reset –hard 提交记录的id  还原到此id时候的状态。\</p><p>git clone ssh链接 。 远程仓库克隆到自己本地的电脑上。这里以github为例。</p><p>点击右上角绿色方块  点击your repositories</p><p><img src="/2018/11/29/git学习/4.png" alt=""></p><p>进入到你要克隆的仓库</p><p><img src="/2018/11/29/git学习/5.png" alt=""></p><p>点击右侧clone or download，出来默认是http格式的，下面的链接也是http开头的。但是我们需要的是ssh格式的，所以我们点击use ssh。</p><p><img src="/2018/11/29/git学习/7.png" alt=""></p><p>点击之后链接变成了ssh格式。然后选中ctrl+c复制  或者点击箭头指着的按钮都行。</p><p><img src="/2018/11/29/git学习/8.png" alt=""></p><p>然后在你的项目文件夹下邮件点击git bash 打开命令窗口 。在这个命令窗口中把链接粘贴过去就行。</p><p>tips小技巧，shift+insert 粘贴效果比较不错 。</p><p><img src="/2018/11/29/git学习/9.png" alt=""></p><p>然后会发现在项目文件夹下多了一个文件夹 就是你克隆的项目名字。到这里就成功了 。</p><p><img src="/2018/11/29/git学习/10.png" alt=""></p><p>git push origin  在你本地项目的文件夹下邮件git bash把本地项目提交推送到远程服务器仓库。这样当更换电脑或是本地仓库被破坏时，可以快速从远程仓库克隆回复。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ol><li>(<em>newfeature)git add .   git commit -m “”</em></li><li><em>(</em>newfeature)git checkout master</li><li>(*marster)git merge newferture  这样就会把新分支合并到主分支下。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git优势&quot;&gt;&lt;a href=&quot;#git优势&quot; class=&quot;headerlink&quot; title=&quot;git优势&quot;&gt;&lt;/a&gt;git优势&lt;/h2&gt;&lt;p&gt;git能大幅提高工作效率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录每次代码变更的内容和时间点，如果代码丢失或崩溃，可以快速回复
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>hello my blog</title>
    <link href="http://yoursite.com/2018/11/27/hello-python/"/>
    <id>http://yoursite.com/2018/11/27/hello-python/</id>
    <published>2018-11-27T12:55:48.000Z</published>
    <updated>2018-11-28T14:29:27.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-11-28-22-26"><a href="#2018-11-28-22-26" class="headerlink" title="2018-11-28 22:26"></a>2018-11-28 22:26</h2><p>博客终于搭建好，耗费2个晚上的时间。<br>眼花缭乱，头昏脑涨。<br>功夫不负有心人。<br>终于弄好，虽然不难，但是巨麻烦。<br>记录下这个时间点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-11-28-22-26&quot;&gt;&lt;a href=&quot;#2018-11-28-22-26&quot; class=&quot;headerlink&quot; title=&quot;2018-11-28 22:26&quot;&gt;&lt;/a&gt;2018-11-28 22:26&lt;/h2&gt;&lt;p&gt;博客终于搭建好，耗费2个晚上
      
    
    </summary>
    
      <category term="test" scheme="http://yoursite.com/categories/test/"/>
    
    
      <category term="test blog" scheme="http://yoursite.com/tags/test-blog/"/>
    
      <category term="hexo is great" scheme="http://yoursite.com/tags/hexo-is-great/"/>
    
  </entry>
  
</feed>
